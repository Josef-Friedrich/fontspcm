% \iffalse meta-comment
%
% Copyright (C) 2015 by Josef Friedrich <josef@friedrich.rocks>
% ----------------------------------------------------------------------
% This work may be distributed and/or modified under the conditions of
% the LaTeX Project Public License, either version 1.3 of this license
% or (at your option) any later version.  The latest version of this
% license is in:
%
%   http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
%
% The Current Maintainer of this work is Josef Friedrih.
%
% This work consists of the files fontspcm.dtx and fontspcm.ins
% and the derived filebase fontspcm.sty.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{fontspcm.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<package>\ProvidesPackage{fontspcm}
%<*package>
    [2015/07/19 v1.0 .dtx fontspcm file]
%</package>
%
%<*driver>
\documentclass{ltxdoc}
\usepackage{fontspcm}[2015/07/19]
\usepackage{hyperref}
\EnableCrossrefs
\CodelineIndex
\RecordChanges

\MakeShortVerb{\|}

\begin{document}

\changes{v1.0}{2004/11/05}{Initial version}

\GetFileInfo{fontspcm.dtx}

\DoNotIndex{\newcommand,\newenvironment}

\title{The \textsf{fontspcm} \emph{(font specimen)} package\thanks{This
  document corresponds to \textsf{fontspcm}~\fileversion, dated
  \filedate.}}
\author{Josef Friedrich \\ \texttt{josef@friedrich.rocks}}

\maketitle

\section{Introduction}

\subsection{About the package name}

|fontspcm| is a abbreviation for \emph{font specimen}. The name of the
package is inspired by the packages |fontspec| and |fontsmpl|.

\subsection{Other font specimen packages.}

There are a lot of other packages dealing with font samples.

\begin{description}


% fontbl
\item[\href{https://www.ctan.org/pkg/fontbl}{fontbl}]

\emph{A font sampler}

An interactive program, that asks for font name and
magnification, and then sets a table, a lower- and an upper-case
alphabet listing, and a short text sample. This sample reflects
a combination of the options available in testfont (in the Plain
\TeX distribution).


% fontbook
\item[\href{https://www.ctan.org/pkg/fontbook}{fontbook}]

\emph{Generate a font book}

The package provides a means of producing a ‘book’ of font samples
(for evaluation, etc.).


% fontchart
\item[\href{https://www.ctan.org/pkg/fontchart}{fontchart}]

\emph{A font sampler}

Produces a font sample that is in some ways simpler than that
produced by testfont (in the Plain TeX distribution), but which
shows strikingly large glyph images, and avoids some difficulties
with boundary characters, such as are often used in Greek fonts (and
fonts for similar writing systems).


% fontsampler
\item[\href{https://www.ctan.org/pkg/fontsampler}{fontsampler}]

\emph{Samples of fonts that come with TeX Live}

A set of short examples of a wide collection of fonts.


% fontsmpl
\item[\href{https://www.ctan.org/pkg/fontsmpl}{fontsmpl}]

\emph{Print a sample of a font}

Provides a package which defines a command |\fontsample| (which
will print a sample of the current font), and a document which
prompts for a font family name (such as "cmr") and prints a sampler of
the whole family.

This package is part of the tools bundle in the LaTeX required
distribution.


% fonttable
\item[\href{https://www.ctan.org/pkg/fonttable}{fonttable}]

\emph{Print font tables from a LaTeX document}

This is a package version of nfssfont.tex (part of the LaTeX
distribution); it enables you to print a table of the characters of a
font and/or some text (for demonstration or testing purposes), from
within a document. (Packages such as |testfont| and nfssfont.tex provide
these facilities, but they run as interactive programs: the user is
expected to type details of what is needed.)

Note that the package |mftinc| also has a |\fonttable| function; the
documentation explains how avoid a clash with that package.


% showcharinbox
\item[\href{https://www.ctan.org/pkg/showcharinbox}{showcharinbox}]

\emph{Show characters inside a box}

The package typesets a character inside a box, showing where reference
point is, and displaying width, height, and depth information of the
character.

The output is like that on page 63 of “The \TeX{}Book” or page 101 of
“The METAFONTbook”. The package itself is motivated by Knuth’s macros in
the file manmac.tex.

Users should note that using a small size for the character inside the
box does not make any sense: use a large size.


% testfont
\item[\href{https://www.ctan.org/pkg/testfont}{testfont}]

\emph{A testbed for font evaluation}

This file (part of the Plain  \TeX{} distribution) allows the user to
select fonts and to perform a number of evaluation tests, from
simple font tables through to elaborate pattern samples.

\end{description}

\section{Usage}

Put text here.


  \DocInput{fontspcm.dtx}
  \PrintChanges
  \PrintIndex
\end{document}
%</driver>
%<*readme>
# License

Copyright (C) 2015 by Josef Friedrich <josef@friedrich.rocks>
------------------------------------------------------------------------
This work may be distributed and/or modified under the conditions of
the LaTeX Project Public License, either version 1.3 of this license
or (at your option) any later version.  The latest version of this
license is in:

  http://www.latex-project.org/lppl.txt

and version 1.3 or later is part of all distributions of LaTeX
version 2005/12/01 or later.

# Repository

https://github.com/Josef-Friedrich/fontspcm

# Installation

Get source:

    git clone git@github.com:Josef-Friedrich/fontspcm.git
    cd fontspcm

Compile:

    make

or manually:

    luatex fontspcm.ins
    lualatex fontspcm.dtx
    makeindex -s gglo.ist -o fontspcm.gls fontspcm.glo
    makeindex -s gind.ist -o fontspcm.ind fontspcm.idx
    lualatex fontspcm.dtx

%</readme>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \StopEventually{}
%
% \section{Implementation}
% \iffalse
%<*package>
% \fi
%
%    \begin{macrocode}
\RequirePackage{fontspec}
\directlua{
  fontspcm = require('fontspcm')
}
%    \end{macrocode}
%
% \begin{macro}{\fontspcm@glyph@view}
% This macro formats the view of one glyph.
%    \begin{macrocode}
\def\fontspcm@glyph@view#1{%
  \noindent%
  \parbox[t][0.75cm][c]{1cm}{%
    \centerline{\huge #1}%
  }%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontspcm@glyph@name}
% The macro |\fontspcm@glyph@name| formats the glyph name.
%    \begin{macrocode}
\def\fontspcm@glyph@name#1{%
  \noindent%
  \parbox[t][0.75cm][c]{1cm}{%
    \centerline{%
      \tiny%
      \fontfamily{lmtt}\selectfont%
      #1%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontspcm@glyph@content}
%    \begin{macrocode}
\def\fontspcm@glyph@content#1#2{%
  \par%
  \fontspcm@glyph@view{#1}%
  \par%
  \fontspcm@glyph@name{#2}%
  \par%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontspcmglyphframe}
%    \begin{macrocode}
\def\fontspcmglyphframe#1#2{%
  \fbox{%
    \parbox[b][1.5cm][t]{1cm}{%
      \fontspcm@glyph@content{#1}{#2}%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\fontspcm@set@font}
%    \begin{macrocode}
\def\fontspcm@set@font{%
  \directlua{
    fontspcm.set_font()
  }%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\fontspcm@info}
%    \begin{macrocode}
\def\fontspcm@info#1{%
  \directlua{
    output = fontspcm.font['#1']
    if output then
      tex.print(output)
    end
  }%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\fontsampler}
%    \begin{macrocode}
\newcommand{\fontsampler}[1]{
  \directlua{
    fontspcm.fontsampler("#1")
  }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fonttable}
%    \begin{macrocode}
\newcommand{\fonttable}[2]{
  \par
  {\fontspec{#1} \directlua{tex.print(sampletext)}}
  \par
  {\tiny #2}
  \bigskip
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontspcm@sample@text}
% The macro prints the string |fontspcm.sample_text|.
%    \begin{macrocode}
\newcommand{\fontspcm@sample@text}[1]{%
  \begingroup%
  \noindent%
  \fontsize{#1pt}{1em}\selectfont%
  \mbox{%
    \directlua{
      tex.print(fontspcm.sample_text)
    }%
  }%
  \par%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontspcm@sizes}
%    \begin{macrocode}
\newcommand{\fontspcm@sizes}{%
  \makeatletter
  \directlua{fontspcm.sizes()}
  \makeatother
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontspcm@font@neutral}
%    \begin{macrocode}
\newcommand{\fontspcm@font@neutral}{%
  \fontfamily{lmr}\selectfont%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\fontspcm@font@info@format}
%    \begin{macrocode}
\newcommand{\fontspcm@font@info@format}[2]{%
  \begingroup%
  \let\i\fontspcm@info%
  \fontspcm@font@neutral%
  \noindent%
  \textbf{#1:} \i{#2}%
  \par%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontspcm@font@info}
%    \begin{macrocode}
\newcommand{\fontspcm@font@info}{%
  \let\format\fontspcm@font@info@format%
  \format{Font name}{fontname}
  \format{Full name}{fullname}
  \format{Family name}{familyname}
  \format{Copyright}{copyright}
  \format{File name}{filename}
  \format{Weight}{weight}
  \format{Italic angle}{italicangle}
  \format{Comments}{comments}
  \format{Origname}{origname}
  \format{Glyph count}{glyphmax}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontspcm@glyph}
%    \begin{macrocode}
\newcommand{\fontspcm@glyph}[1]{
  \catcode`\_=12
  \catcode`\$=12
  \renewcommand{\arraystretch}{2}
  \directlua{
    fontspcm.fontchar(#1)
  }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fontspcm@glyphs}
%    \begin{macrocode}
\newcommand{\fontspcm@glyphs}{
  \catcode`\_=12
  \catcode`\$=12
  \renewcommand{\arraystretch}{2}
  \noindent\directlua{
    fontspcm.glyphs()
  }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{environment}{fontspcm}
%    \begin{macrocode}
\newenvironment{fontspcm}[1]{
  \fontspec{#1}%
  \fontspcm@set@font%
  \let\sizes\fontspcm@sizes%
  \let\glyphs\fontspcm@glyphs%
  \let\glyph\fontspcm@glyph%
  \let\info\fontspcm@font@info%
}{}
%    \end{macrocode}
% \end{environment}
%
% \iffalse
%</package>
%<*lua>
% \fi
%
%    \begin{macrocode}
local fontspcm = {}
%    \end{macrocode}
%
% |fontspcm.font| is a lua table which stores all informations of the
% current font. This a font table is generated by calling first
% |fontloader.open()| and then |fontloader.to_table()|.
%    \begin{macrocode}
fontspcm.font = {}
%    \end{macrocode}
%
% |fontspcm.font_id| is the variable which holds the current font id.
% The font id is a numeric value which is returned by the lua function
% |font.current()|.
%    \begin{macrocode}
fontspcm.font_id = ''
%    \end{macrocode}
%
% |fontspcm.sample_text| is a short sample text which is displayed
% without line breaks.
%    \begin{macrocode}
fontspcm.sample_text = 'The quick brown fox jumps over the lazy dog.'
%    \end{macrocode}
%
% |fontspcm.font_sizes| stores font sizes in points dimension (pt) as a
% lua table.
%    \begin{macrocode}
fontspcm.font_sizes = {6,7,8,9,10,11,12,14,16,18,22,24,48,64}
%    \end{macrocode}
%
%    \begin{macrocode}
local function dirtree(dir)
  assert(dir and dir ~= "", "directory parameter is missing or empty")
  if string.sub(dir, -1) == "/" then
    dir=string.sub(dir, 1, -2)
  end

  local function yieldtree(dir)
    for entry in lfs.dir(dir) do
      if not entry:match("^%.") then
        entry=dir.."/"..entry
          if not lfs.isdir(entry) then
            coroutine.yield(entry,lfs.attributes(entry))
          end
          if lfs.isdir(entry) then
            yieldtree(entry)
          end
      end
    end
  end

  return coroutine.wrap(function() yieldtree(dir) end)
end
%    \end{macrocode}
%
%    \begin{macrocode}
function fontspcm.fontsampler(dir)
  local t = {}
  local w = {}
  local p = {}

  for path in dirtree(dir) do
    if path:match(".ttf","-4") then

      f = fontloader.open(path)

      --table.insert(t, f.fullname)

      w[f.weight] = path
      t[f.familyname] = w

      output =
        -- "Fullname: " .. f.fullname .. "; " ..
        "Familyname: " .. f.familyname .. "; " ..
        -- "Fontname: " .. f.fontname .. "; " ..
        -- "Italic: " .. f.italicangle .. "; " ..
        "Weight: " .. f.weight .. "; "

      -- tex.print(output)
      tex.print("\\fonttable{" .. f.fontname .. "}{" .. output  .. "}")

    end
  end
end
%    \end{macrocode}
%
%    \begin{macrocode}
function fontspcm.glyphs()
  local f = fontspcm.font
  local i = 0
  while (i < f.glyphmax) do
    local g = f.glyphs[i]
    if g then
      local chr = fontspcm.fontchar(g.name)
      if chr then
        frame = [[\fontspcmglyphframe{%s}{%s}]]
        output = string.format(frame, chr, g.name)
        tex.print(output)
      end
    end
    i = i + 1
  end
end
%    \end{macrocode}
%
%    \begin{macrocode}
function fontspcm.set_font()
  fontspcm.font_id = font.current()
  local f = font.getfont(fontspcm.font_id)
  local filename = f.filename
  f = fontloader.open(filename)
  fontspcm.font = fontloader.to_table(f)
  fontspcm.font.filename = filename
  fontloader.close(f)
end
%    \end{macrocode}
%
%    \begin{macrocode}
function fontspcm.sizes()
  for key, size in ipairs(fontspcm.font_sizes) do
    tex.print(' \\fontspcm@sample@text{' .. size .. '} ')
  end
end
%    \end{macrocode}
%
%    \begin{macrocode}
function fontspcm.fontchar(chr)
  local chr = luaotfload.aux.slot_of_name(fontspcm.font_id, chr, false)
  if chr and type(chr) == "number" then
    return string.format([[\char"%X]], chr)
  end
end
%    \end{macrocode}
%
% Return the module table.
%    \begin{macrocode}
return fontspcm
%    \end{macrocode}
%
% \iffalse
%</lua>
% \fi
%
% \Finale
\endinput
