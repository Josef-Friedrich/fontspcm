% \iffalse meta-comment
%
% Copyright (C) 2015 by Josef Friedrich <josef@friedrich.rocks>
% ----------------------------------------------------------------------
% This work may be distributed and/or modified under the conditions of
% the LaTeX Project Public License, either version 1.3 of this license
% or (at your option) any later version.  The latest version of this
% license is in:
%
%   http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
%
% The Current Maintainer of this work is Josef Friedrih.
%
% This work consists of the files specimen.dtx and specimen.ins
% and the derived filebase specimen.sty.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{specimen.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<package>\ProvidesPackage{specimen}
%<*package>
    [2015/07/19 v1.0 .dtx specimen file]
%</package>
%
%<*driver>
\documentclass{ltxdoc}
\usepackage{specimen}[2015/07/19]
\usepackage{hyperref}
\EnableCrossrefs
\CodelineIndex
\RecordChanges

\MakeShortVerb{\|}

\begin{document}
  \DocInput{specimen.dtx}
  \PrintChanges
  \PrintIndex
\end{document}
%</driver>
%<*readme>
# License

Copyright (C) 2015 by Josef Friedrich <josef@friedrich.rocks>
------------------------------------------------------------------------
This work may be distributed and/or modified under the conditions of
the LaTeX Project Public License, either version 1.3 of this license
or (at your option) any later version.  The latest version of this
license is in:

  http://www.latex-project.org/lppl.txt

and version 1.3 or later is part of all distributions of LaTeX
version 2005/12/01 or later.

# Repository

https://github.com/Josef-Friedrich/specimen

# Installation

Get source:

    git clone git@github.com:Josef-Friedrich/specimen.git
    cd specimen

Compile:

    make

or manually:

    luatex specimen.ins
    lualatex specimen.dtx
    makeindex -s gglo.ist -o specimen.gls specimen.glo
    makeindex -s gind.ist -o specimen.ind specimen.idx
    lualatex specimen.dtx

%</readme>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v1.0}{2004/11/05}{Initial version}
%
% \GetFileInfo{specimen.dtx}
%
% \DoNotIndex{\newcommand,\newenvironment}
%
%
% \title{The \textsf{specimen} package\thanks{This document
%   corresponds to \textsf{specimen}~\fileversion, dated \filedate.}}
% \author{Josef Friedrich \\ \texttt{josef@friedrich.rocks}}
%
% \maketitle
%
% \section{Introduction}
%
% \subsection{About the package name}
%
% The name of the package is inspired by the package names |fontspec|
% and |fontsmpl|. There are a lot of other packages dealing with font
% samples.
%
% \subsection{Other font specimen packages.}
%
% \begin{description}
% \item[\href{https://www.ctan.org/pkg/fontbook}{fontbook}]
% Fsdfsdf \\
% The pack­age pro­vides a means of pro­duc­ing a ‘book’ of font sam­ples
% (for eval­u­a­tion, etc.).
%
% \item[\href{https://www.ctan.org/pkg/fontbl}{fontbl}] A font sam­pler
%
% \item[\href{https://www.ctan.org/pkg/fontbook}{fontbook}] Font book
%
% \item[\href{https://www.ctan.org/pkg/fonttable}{fonttable}]
% \end{description}
%
% \section{Usage}
%
% Put text here.
%
%
% \StopEventually{}
%
% \section{Implementation}
% \iffalse
%<*package>
% \fi
%
%    \begin{macrocode}
\RequirePackage{fontspec}
\directlua{
  specimen = require('specimen')
}
%    \end{macrocode}
%
% \begin{macro}{\specimen@glyph@view}
% This macro formats the view of one glyph.
%    \begin{macrocode}
\def\specimen@glyph@view#1{%
  \noindent%
  \parbox[t][0.75cm][c]{1cm}{%
    \centerline{\huge #1}%
  }%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\specimen@glyph@name}
% The macro |\specimen@glyph@name| formats the glyph name.
%    \begin{macrocode}
\def\specimen@glyph@name#1{%
  \noindent%
  \parbox[t][0.75cm][c]{1cm}{%
    \centerline{%
      \tiny%
      \fontfamily{lmtt}\selectfont%
      #1%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\specimen@glyph@content}
%    \begin{macrocode}
\def\specimen@glyph@content#1#2{%
  \par%
  \specimen@glyph@view{#1}%
  \par%
  \specimen@glyph@name{#2}%
  \par%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\specimenglyphframe}
%    \begin{macrocode}
\def\specimenglyphframe#1#2{%
  \fbox{%
    \parbox[b][1.5cm][t]{1cm}{%
      \specimen@glyph@content{#1}{#2}%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\specimen@set@font}
%    \begin{macrocode}
\def\specimen@set@font{%
  \directlua{
    specimen.set_font()
  }%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\specimen@info}
%    \begin{macrocode}
\def\specimen@info#1{%
  \directlua{
    output = specimen.font['#1']
    if output then
      tex.print(output)
    end
  }%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\fontsampler}
%    \begin{macrocode}
\newcommand{\fontsampler}[1]{
  \directlua{
    specimen.fontsampler("#1")
  }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\fonttable}
%    \begin{macrocode}
\newcommand{\fonttable}[2]{
  \par
  {\fontspec{#1} \directlua{tex.print(sampletext)}}
  \par
  {\tiny #2}
  \bigskip
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\specimen@sample@text}
% The macro prints the string |specimen.sample_text|.
%    \begin{macrocode}
\newcommand{\specimen@sample@text}[1]{%
  \begingroup%
  \noindent%
  \fontsize{#1pt}{1em}\selectfont%
  \mbox{%
    \directlua{
      tex.print(specimen.sample_text)
    }%
  }%
  \par%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\specimen@sizes}
%    \begin{macrocode}
\newcommand{\specimen@sizes}{%
  \makeatletter
  \directlua{specimen.sizes()}
  \makeatother
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\specimen@font@neutral}
%    \begin{macrocode}
\newcommand{\specimen@font@neutral}{%
  \fontfamily{lmr}\selectfont%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\specimen@font@info@format}
%    \begin{macrocode}
\newcommand{\specimen@font@info@format}[2]{%
  \begingroup%
  \let\i\specimen@info%
  \specimen@font@neutral%
  \noindent%
  \textbf{#1:} \i{#2}%
  \par%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\specimen@font@info}
%    \begin{macrocode}
\newcommand{\specimen@font@info}{%
  \let\format\specimen@font@info@format%
  \format{Font name}{fontname}
  \format{Full name}{fullname}
  \format{Family name}{familyname}
  \format{Copyright}{copyright}
  \format{File name}{filename}
  \format{Weight}{weight}
  \format{Italic angle}{italicangle}
  \format{Comments}{comments}
  \format{Origname}{origname}
  \format{Glyph count}{glyphmax}
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\specimen@glyph}
%    \begin{macrocode}
\newcommand{\specimen@glyph}[1]{
  \catcode`\_=12
  \catcode`\$=12
  \renewcommand{\arraystretch}{2}
  \directlua{
    specimen.fontchar(#1)
  }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\specimen@glyphs}
%    \begin{macrocode}
\newcommand{\specimen@glyphs}{
  \catcode`\_=12
  \catcode`\$=12
  \renewcommand{\arraystretch}{2}
  \noindent\directlua{
    specimen.glyphs()
  }
}
%    \end{macrocode}
% \end{macro}
%
% \begin{environment}{specimen}
%    \begin{macrocode}
\newenvironment{specimen}[1]{
  \fontspec{#1}%
  \specimen@set@font%
  \let\sizes\specimen@sizes%
  \let\glyphs\specimen@glyphs%
  \let\glyph\specimen@glyph%
  \let\info\specimen@font@info%
}{}
%    \end{macrocode}
% \end{environment}
%
% \iffalse
%</package>
%<*lua>
% \fi
%
%    \begin{macrocode}
local specimen = {}
%    \end{macrocode}
%
% |specimen.font| is a lua table which stores all informations of the
% current font. This a font table is generated by calling first
% |fontloader.open()| and then |fontloader.to_table()|.
%    \begin{macrocode}
specimen.font = {}
%    \end{macrocode}
%
% |specimen.font_id| is the variable which holds the current font id.
% The font id is a numeric value which is returned by the lua function
% |font.current()|.
%    \begin{macrocode}
specimen.font_id = ''
%    \end{macrocode}
%
% |specimen.sample_text| is a short sample text which is displayed
% without line breaks.
%    \begin{macrocode}
specimen.sample_text = 'The quick brown fox jumps over the lazy dog.'
%    \end{macrocode}
%
% |specimen.font_sizes| stores font sizes in points dimension (pt) as a
% lua table.
%    \begin{macrocode}
specimen.font_sizes = {6,7,8,9,10,11,12,14,16,18,22,24,48,64}
%    \end{macrocode}
%
%    \begin{macrocode}
local function dirtree(dir)
  assert(dir and dir ~= "", "directory parameter is missing or empty")
  if string.sub(dir, -1) == "/" then
    dir=string.sub(dir, 1, -2)
  end

  local function yieldtree(dir)
    for entry in lfs.dir(dir) do
      if not entry:match("^%.") then
        entry=dir.."/"..entry
          if not lfs.isdir(entry) then
            coroutine.yield(entry,lfs.attributes(entry))
          end
          if lfs.isdir(entry) then
            yieldtree(entry)
          end
      end
    end
  end

  return coroutine.wrap(function() yieldtree(dir) end)
end
%    \end{macrocode}
%
%    \begin{macrocode}
function specimen.fontsampler(dir)
  local t = {}
  local w = {}
  local p = {}

  for path in dirtree(dir) do
    if path:match(".ttf","-4") then

      f = fontloader.open(path)

      --table.insert(t, f.fullname)

      w[f.weight] = path
      t[f.familyname] = w

      output =
        -- "Fullname: " .. f.fullname .. "; " ..
        "Familyname: " .. f.familyname .. "; " ..
        -- "Fontname: " .. f.fontname .. "; " ..
        -- "Italic: " .. f.italicangle .. "; " ..
        "Weight: " .. f.weight .. "; "

      -- tex.print(output)
      tex.print("\\fonttable{" .. f.fontname .. "}{" .. output  .. "}")

    end
  end
end
%    \end{macrocode}
%
%    \begin{macrocode}
function specimen.glyphs()
  local f = specimen.font
  local i = 0
  while (i < f.glyphmax) do
    local g = f.glyphs[i]
    if g then
      local chr = specimen.fontchar(g.name)
      if chr then
        frame = [[\specimenglyphframe{%s}{%s}]]
        output = string.format(frame, chr, g.name)
        tex.print(output)
      end
    end
    i = i + 1
  end
end
%    \end{macrocode}
%
%    \begin{macrocode}
function specimen.set_font()
  specimen.font_id = font.current()
  local f = font.getfont(specimen.font_id)
  local filename = f.filename
  f = fontloader.open(filename)
  specimen.font = fontloader.to_table(f)
  specimen.font.filename = filename
  fontloader.close(f)
end
%    \end{macrocode}
%
%    \begin{macrocode}
function specimen.sizes()
  for key, size in ipairs(specimen.font_sizes) do
    tex.print(' \\specimen@sample@text{' .. size .. '} ')
  end
end
%    \end{macrocode}
%
%    \begin{macrocode}
function specimen.fontchar(chr)
  local chr = luaotfload.aux.slot_of_name(specimen.font_id, chr, false)
  if chr and type(chr) == "number" then
    return string.format([[\char"%X]], chr)
  end
end
%    \end{macrocode}
%
% Return the module table.
%    \begin{macrocode}
return specimen
%    \end{macrocode}
%
% \iffalse
%</lua>
% \fi
%
% \Finale
\endinput
